SELECT COUNT(*) FROM users 
WHERE email LIKE '%.com';
--------------------------------------------------
What are the most popular first names on Codeflix?
Use COUNT(), GROUP BY, and ORDER BY to create a list of first names and occurrences within the users table.
Order the data so that the most popular names are displayed first.

SELECT first_name, COUNT(*) AS 'count'
FROM users
GROUP BY first_name
ORDER BY 2 DESC;
--------------------------------------------------
The UX Research team wants to see a distribution of watch durations. They want the result to contain:

duration, which is the watch event duration, rounded to the closest minute
count, the number of watch events falling into this “bucket”
Your result should look like:

duration	count
1.0	        9
2.0	        21
3.0	        19
…	          …

Use COUNT(), GROUP BY, and ORDER BY to create this result and order this data by increasing duration.

SELECT ROUND(watch_duration_in_minutes) AS 'duration',
   COUNT(*) AS 'count'
FROM watch_history
GROUP BY duration
ORDER BY duration ASC;

--------------------------------------------------

Find all the users that have successfully made a payment to Codeflix and find their total amount paid.
Sort them by their total payments (from high to low).

Use SUM(), WHERE, GROUP BY, and ORDER BY.

SELECT user_id, SUM(amount) AS 'total' FROM payments
WHERE status = 'paid'
GROUP BY user_id
ORDER BY SUM(amount) DESC;

--------------------------------------------------

Generate a table of user ids and total watch duration for users who watched more than 400 minutes of content.

Use SUM(), GROUP BY, and HAVING to achieve this.

SELECT user_id, 
   SUM(watch_duration_in_minutes) AS 'total_duration'
FROM watch_history
GROUP BY 1
HAVING total_duration > 400;

--------------------------------------------------

To the nearest minute, how many minutes of content were streamed on Codeflix?

SELECT ROUND(SUM(watch_duration_in_minutes), 0) 
FROM watch_history;

--------------------------------------------------

Which days in this period did Codeflix collect the most money?
Your result should have two columns, pay_date and total amount, sorted by the latter descending.
This should only include successful payments (status = 'paid').

Use SUM(), GROUP BY, and ORDER BY.

SELECT pay_date AS 'day',
   SUM(amount) AS 'total'
FROM payments
WHERE status = 'paid'
GROUP BY day
ORDER BY total DESC;

--------------------------------------------------

When users successfully pay Codeflix (status = 'paid'), what is the average payment amount?

SELECT AVG(amount)
FROM payments
WHERE status = 'paid';

--------------------------------------------------

Of all the events in the watch_history table, what is the duration of the longest individual watch event? What is the duration of the shortest?

Use one query and rename the results to max and min.

SELECT MAX(watch_duration_in_minutes) AS MaxDuration, MIN(watch_duration_in_minutes) AS MinDuration
FROM watch_history ;

--------------------------------------------------

1. Getting started, take a look at the startups table:

SELECT * FROM startups;


2. Calculate the total number of companies in the table.

SELECT COUNT(name) AS NumberOfCompanies FROM startups;

3. We want to know the total value of all companies in this table.
Calculate this by getting the SUM() of the valuation column.

SELECT SUM(valuation) SalaryInDollar FROM startups;


4. What is the highest amount raised by a startup?
Return the maximum amount of money raised.

SELECT MAX(raised) HighestAmount FROM startups;


5. Edit the query so that it returns the maximum amount of money raised, during ‘Seed’ stage.

SELECT name, MAX(raised) AS MaxRaised, stage FROM startups
WHERE stage = 'Seed';


6. In what year was the oldest company on the list founded?

SELECT name, MIN(founded) AS OldestCompany FROM startups;


7. Return the average valuation.

SELECT name, AVG(valuation) AS AvgValueation FROM startups;


8. Return the average valuation, in each category.

SELECT name, AVG(valuation) AS AvgValueation FROM startups
GROUP BY category;

9. Return the average valuation, in each category.
Round the averages to tow decimal places.

SELECT name, ROUND(AVG(valuation),2) AS AvgValueation FROM startups
GROUP BY category;


10. Return the average valuation, in each category.
Round the averages to two decimal places.
Lastly, order the list from highest averages to lowest.

SELECT name, ROUND(AVG(valuation),2) AS AvgValueation FROM startups
GROUP BY 1
ORDER BY 2 DESC;


What are the most competitive markets?
11. First, return the name of each category with the total number of companies that belong to it.

SELECT category, COUNT(*) FROM startups
GROUP BY category;


12. Next, filter the result to only include categories that have more than three companies in them.
What are the most competitive markets?

SELECT category, COUNT(*) AS CompetitiveMarkets FROM startups
GROUP BY category
HAVING COUNT(*) > 3
ORDER BY 2 DESC;


Let's see if there's a difference in startups sizes among different locations:
13. What is the average size of a startup in each location?

SELECT location, ROUND(AVG(employees),0) AS Employees FROM startups
GROUP BY 1
ORDER BY 2 DESC;


14. What is the average size of a startup in each location, with average sizes above 500?

SELECT location, ROUND(AVG(employees),0) AS Employees FROM startups
GROUP BY 1
HAVING AVG(employees) > 500
ORDER BY 2 DESC;


-------------------------------------------------- The Metropolitan Museum of Art --------------------------------------------------

1. Start by getting a feel for the met table:

SELECT * FROM met 
LIMIT 10;


2. How many pieces are in the American Decorative Art collection?

SELECT COUNT(*) AS PiecesOfCOllection FROM met; 


3. Celery was considered a luxurious snack in the Victorian era (around the 1800s). Wealthy families served stalks of it in intricate glass vases.
Don’t believe it?

Count the number of pieces where the category includes ‘celery’.

SELECT DISTINCT category, COUNT(*) FROM met
WHERE category LIKE '%celery%'
GROUP BY 1; 


4. Find the title and medium of the oldest piece(s) in the collection.

SELECT MIN(date), title, medium FROM met;

or 

SELECT date, title, medium FROM met
GROUP BY 1 
ORDER BY 1 ASC;


5. Not every American decoration is from the Americas… where are they are coming from?
Find the top 10 countries with the most pieces in the collection.

SELECT country, COUNT(*) FROM met
WHERE country IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10;


6. There are all kinds of American decorative art in the Met’s collection.
Find the categories HAVING more than 100 pieces.

SELECT category, COUNT(*) FROM met
GROUP BY 1
HAVING COUNT(*) > 100
ORDER BY 2 DESC;


7. Lastly, let’s look at some bling!
Count the number of pieces where the medium contains ‘gold’ or ‘silver’.
And sort in descending order.

SELECT medium, COUNT(*) FROM met
WHERE medium LIKE '%gold%'
   OR medium LIKE '%silver%'
GROUP BY 1
ORDER BY 2 DESC;

-------------------------------------------------- Analyze Hacker News Trends --------------------------------------------------

1. Start by getting a feel for the hacker_news table!
Let’s find the most popular Hacker News stories:

SELECT title, score FROM hacker_news
ORDER BY score DESC
LIMIT 5;


2. Recent studies have found that online forums tend to be dominated by a small percentage of their users (1-9-90 Rule).
Is this true of Hacker News?
Is a small percentage of Hacker News submitters taking the majority of the points?
First, find the total score of all the stories.

SELECT SUM(score) ScoreOfStories
FROM hacker_news;


3. Next, we need to pinpoint the users who have accumulated a lot of points across their stories.
Find the individual users who have gotten combined scores of more than 200, and their combined scores.

GROUP BY and HAVING are needed!

SELECT user, SUM(score) AS ScoreOfStories FROM hacker_news
GROUP BY 1
HAVING SUM(score) > 200
ORDER BY 2 DESC;

4. Then, we want to add these users’ scores together and divide by the total to get the percentage.
Add their scores together and divide it by the total sum. Like so:

SELECT (1.0 + 2.0 + 3.0) / 6.0;
So, is Hacker News dominated by these users?

SELECT ROUND((517 + 309 + 304 + 282) / 6366.0, 2) AS UserPercentage;



5. Oh no! While we are looking at the power users, some users are rickrolling — tricking readers into clicking on a link to a funny video and claiming that it links to information about coding.
The url of the video is:
https://www.youtube.com/watch?v=dQw4w9WgXcQ

How many times has each offending user posted this link?

SELECT user,
   COUNT(*) AS OffendingPosts
FROM hacker_news
WHERE url LIKE '%watch?v=dQw4w9WgXcQ%'
GROUP BY 1
ORDER BY 2 DESC;


6. Hacker News stories are essentially links that take users to other websites.
Which of these sites feed Hacker News the most:
GitHub, Medium, or New York Times?
First, we want to categorize each story based on their source.
We can do this using a CASE statement:

            SELECT CASE
               WHEN url LIKE '%github.com%' THEN 'GitHub'
               -- WHEN statement here
               -- WHEN statement here
               -- ELSE statement here
              END AS 'Source'
            FROM hacker_news;

Fill in the other WHEN statements and the ELSE statement.

SELECT CASE
   WHEN url LIKE '%github.com%' THEN 'GitHub'
   WHEN url LIKE '%medium.com%' THEN 'Medium'
   WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
   ELSE 'Other'
  END AS 'Source'
FROM hacker_news;


7. Next, build on the previous query:
Add a column for the number of stories from each URL using COUNT().
Also, GROUP BY the CASE statement.
Remember that you can refer to a column in GROUP BY using a number.

SELECT CASE
   WHEN url LIKE '%github.com%' THEN 'GitHub'
   WHEN url LIKE '%medium.com%' THEN 'Medium'
   WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
   ELSE 'Other'
  END AS 'Source',
  COUNT(*)
FROM hacker_news
GROUP BY 1;


8. Every submitter wants their story to get a high score so that the story makes it to the front page, but…
What’s the best time of the day to post a story on Hacker News?
Before we get started, let’s run this query and take a look at the timestamp column:

            SELECT timestamp
            FROM hacker_news
            LIMIT 10;
            Notice that the values are formatted like:

            2018-05-08T12:30:00Z

If you ignore the T and Z, the format is:
YYYY-MM-DD HH:MM:SS

SELECT timestamp FROM hacker_news
LIMIT 10;


9. SQLite comes with a strftime() function - a very powerful function that allows you to return a formatted date.
It takes two arguments:

strftime(format, column)

Let’s test this function out:

               SELECT timestamp,
                  strftime('%H', timestamp)
               FROM hacker_news
               GROUP BY 1
               LIMIT 20;
               
What do you think this does? Open the hint if you’d like to learn more.

For strftime(__, timestamp):

%Y returns the year (YYYY)
%m returns the month (01-12)
%d returns the day of the month (1-31)
%H returns 24-hour clock (00-23)
%M returns the minute (00-59)
%S returns the seconds (00-59)
if timestamp format is YYYY-MM-DD HH:MM:SS.


10. Okay, now we understand how strftime() works. Let’s write a query that returns three columns:
The hours of the timestamp
The average score for each hour
The count of stories for each hour

SELECT strftime('%H', timestamp), 
   AVG(score),
   COUNT(*)
FROM hacker_news
GROUP BY 1
ORDER BY 1;


11. Let’s edit a few things in the previous query:
Round the average scores (ROUND()).
Rename the columns to make it more readable (AS).
Add a WHERE clause to filter out the NULL values in timestamp.
Take a look at the result again:
What are the best hours to post a story on Hacker News?

SELECT strftime('%H', timestamp) AS 'Hour', 
   ROUND(AVG(score), 1) AS 'Average Score', 
   COUNT(*) AS 'Number of Stories'
FROM hacker_news
WHERE timestamp IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC;

-------------------------------------------------- Cryptocurrency Exchange --------------------------------------------------

1. Let’s start by checking out the whole transactions table:
What are the column names?

SELECT * FROM transactions;


2. The money_in column records the amount (in USD) the user bought.
What is the total money_in in the table?

SELECT SUM(money_in) FROM transactions;


3. The money_out column records the amount (in USD) the user sold.
What is the total money_out in the table?

SELECT SUM(money_out) FROM transactions;


4. It was reported that Bitcoin dominates Fiddy Cent’s exchange. Let’s see if it is true within these dates by answering two questions:

How many money_in transactions are in this table?
How many money_in transactions are in this table where ‘BIT’ is the currency?

SELECT COUNT(money_in) FROM transactions;
 
SELECT COUNT(money_in) FROM transactions
WHERE currency = 'BIT';


5. What was the largest transaction in this whole table?
Was it money_in or money_out?

SELECT 
CASE 
  WHEN MAX(money_in) < MAX(money_out) THEN 'money_in'
  WHEN MAX(money_in) > MAX(money_out) THEN 'money_out'
  ELSE 'both are the same'
END AS 'Where is the largest transaction in?',
CASE
  WHEN MAX(money_in) < MAX(money_out) THEN MAX(money_in)
  WHEN MAX(money_in) > MAX(money_out) THEN MAX(money_out)
END AS 'What was the largest transaction?'
FROM transactions;


6. What is the average money_in in the table for the currency Ethereum (‘ETH’)?

SELECT ROUND(AVG(money_in),0) AS AvgEthereumMoney_in FROM transactions
WHERE currency = 'ETH';


7. Let’s build a ledger for the different dates.
Select date, average money_in, and average money_out from the table.
And group everything by date.

SELECT date, 
   ROUND(AVG(money_in),0) AS Avg_IN, 
   ROUND(AVG(money_out),0) AS Avg_Out
FROM transactions
GROUP BY date
ORDER BY 2 DESC;


8. To make the previous query easier to read, round the averages to 2 decimal places.
Give the column aliases using AS for readability.

SELECT date AS 'Date', 
   ROUND(AVG(money_in), 2) AS 'Average Buy',
   ROUND(AVG(money_out), 2) AS 'Average Sell'
FROM transactions
GROUP BY date;


-------------------------------------------------- Joining Multiple Tables --------------------------------------------------





















