SELECT COUNT(*) FROM users 
WHERE email LIKE '%.com';
--------------------------------------------------
What are the most popular first names on Codeflix?
Use COUNT(), GROUP BY, and ORDER BY to create a list of first names and occurrences within the users table.
Order the data so that the most popular names are displayed first.

SELECT first_name, COUNT(*) AS 'count'
FROM users
GROUP BY first_name
ORDER BY 2 DESC;
--------------------------------------------------
The UX Research team wants to see a distribution of watch durations. They want the result to contain:

duration, which is the watch event duration, rounded to the closest minute
count, the number of watch events falling into this “bucket”
Your result should look like:

duration	count
1.0	        9
2.0	        21
3.0	        19
…	          …

Use COUNT(), GROUP BY, and ORDER BY to create this result and order this data by increasing duration.

SELECT ROUND(watch_duration_in_minutes) AS 'duration',
   COUNT(*) AS 'count'
FROM watch_history
GROUP BY duration
ORDER BY duration ASC;

--------------------------------------------------

Find all the users that have successfully made a payment to Codeflix and find their total amount paid.
Sort them by their total payments (from high to low).

Use SUM(), WHERE, GROUP BY, and ORDER BY.

SELECT user_id, SUM(amount) AS 'total' FROM payments
WHERE status = 'paid'
GROUP BY user_id
ORDER BY SUM(amount) DESC;

--------------------------------------------------

Generate a table of user ids and total watch duration for users who watched more than 400 minutes of content.

Use SUM(), GROUP BY, and HAVING to achieve this.

SELECT user_id, 
   SUM(watch_duration_in_minutes) AS 'total_duration'
FROM watch_history
GROUP BY 1
HAVING total_duration > 400;

--------------------------------------------------

To the nearest minute, how many minutes of content were streamed on Codeflix?

SELECT ROUND(SUM(watch_duration_in_minutes), 0) 
FROM watch_history;

--------------------------------------------------

Which days in this period did Codeflix collect the most money?
Your result should have two columns, pay_date and total amount, sorted by the latter descending.
This should only include successful payments (status = 'paid').

Use SUM(), GROUP BY, and ORDER BY.

SELECT pay_date AS 'day',
   SUM(amount) AS 'total'
FROM payments
WHERE status = 'paid'
GROUP BY day
ORDER BY total DESC;

--------------------------------------------------

When users successfully pay Codeflix (status = 'paid'), what is the average payment amount?

SELECT AVG(amount)
FROM payments
WHERE status = 'paid';

--------------------------------------------------

Of all the events in the watch_history table, what is the duration of the longest individual watch event? What is the duration of the shortest?

Use one query and rename the results to max and min.

SELECT MAX(watch_duration_in_minutes) AS MaxDuration, MIN(watch_duration_in_minutes) AS MinDuration
FROM watch_history ;

--------------------------------------------------

1. Getting started, take a look at the startups table:

SELECT * FROM startups;


2. Calculate the total number of companies in the table.

SELECT COUNT(name) AS NumberOfCompanies FROM startups;

3. We want to know the total value of all companies in this table.
Calculate this by getting the SUM() of the valuation column.

SELECT SUM(valuation) SalaryInDollar FROM startups;


4. What is the highest amount raised by a startup?
Return the maximum amount of money raised.

SELECT MAX(raised) HighestAmount FROM startups;


5. Edit the query so that it returns the maximum amount of money raised, during ‘Seed’ stage.

SELECT name, MAX(raised) AS MaxRaised, stage FROM startups
WHERE stage = 'Seed';


6. In what year was the oldest company on the list founded?

SELECT name, MIN(founded) AS OldestCompany FROM startups;


7. Return the average valuation.

SELECT name, AVG(valuation) AS AvgValueation FROM startups;


8. Return the average valuation, in each category.

SELECT name, AVG(valuation) AS AvgValueation FROM startups
GROUP BY category;

9. Return the average valuation, in each category.
Round the averages to tow decimal places.

SELECT name, ROUND(AVG(valuation),2) AS AvgValueation FROM startups
GROUP BY category;


10. Return the average valuation, in each category.
Round the averages to two decimal places.
Lastly, order the list from highest averages to lowest.

SELECT name, ROUND(AVG(valuation),2) AS AvgValueation FROM startups
GROUP BY 1
ORDER BY 2 DESC;


What are the most competitive markets?
11. First, return the name of each category with the total number of companies that belong to it.

SELECT category, COUNT(*) FROM startups
GROUP BY category;


12. Next, filter the result to only include categories that have more than three companies in them.
What are the most competitive markets?

SELECT category, COUNT(*) AS CompetitiveMarkets FROM startups
GROUP BY category
HAVING COUNT(*) > 3
ORDER BY 2 DESC;


Let's see if there's a difference in startups sizes among different locations:
13. What is the average size of a startup in each location?

SELECT location, ROUND(AVG(employees),0) AS Employees FROM startups
GROUP BY 1
ORDER BY 2 DESC;


14. What is the average size of a startup in each location, with average sizes above 500?

SELECT location, ROUND(AVG(employees),0) AS Employees FROM startups
GROUP BY 1
HAVING AVG(employees) > 500
ORDER BY 2 DESC;


-------------------------------------------------- The Metropolitan Museum of Art --------------------------------------------------

1. Start by getting a feel for the met table:

SELECT * FROM met 
LIMIT 10;


2. How many pieces are in the American Decorative Art collection?

SELECT COUNT(*) AS PiecesOfCOllection FROM met; 


3. Celery was considered a luxurious snack in the Victorian era (around the 1800s). Wealthy families served stalks of it in intricate glass vases.
Don’t believe it?

Count the number of pieces where the category includes ‘celery’.

SELECT DISTINCT category, COUNT(*) FROM met
WHERE category LIKE '%celery%'
GROUP BY 1; 


4. Find the title and medium of the oldest piece(s) in the collection.

SELECT MIN(date), title, medium FROM met;

or 

SELECT date, title, medium FROM met
GROUP BY 1 
ORDER BY 1 ASC;


5. Not every American decoration is from the Americas… where are they are coming from?
Find the top 10 countries with the most pieces in the collection.

SELECT country, COUNT(*) FROM met
WHERE country IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10;


6. There are all kinds of American decorative art in the Met’s collection.
Find the categories HAVING more than 100 pieces.

SELECT category, COUNT(*) FROM met
GROUP BY 1
HAVING COUNT(*) > 100
ORDER BY 2 DESC;


7. Lastly, let’s look at some bling!
Count the number of pieces where the medium contains ‘gold’ or ‘silver’.
And sort in descending order.

SELECT medium, COUNT(*) FROM met
WHERE medium LIKE '%gold%'
   OR medium LIKE '%silver%'
GROUP BY 1
ORDER BY 2 DESC;

-------------------------------------------------- Analyze Hacker News Trends --------------------------------------------------

1. Start by getting a feel for the hacker_news table!
Let’s find the most popular Hacker News stories:

SELECT title, score FROM hacker_news
ORDER BY score DESC
LIMIT 5;


2. Recent studies have found that online forums tend to be dominated by a small percentage of their users (1-9-90 Rule).
Is this true of Hacker News?
Is a small percentage of Hacker News submitters taking the majority of the points?
First, find the total score of all the stories.










































