-------------------------------------------------- Calculating Aggregates --------------------------------------------------

SELECT COUNT(*) FROM users 
WHERE email LIKE '%.com';

--------------------------------------------------

What are the most popular first names on Codeflix?
Use COUNT(), GROUP BY, and ORDER BY to create a list of first names and occurrences within the users table.
Order the data so that the most popular names are displayed first.

SELECT first_name, COUNT(*) AS 'count'
FROM users
GROUP BY first_name
ORDER BY 2 DESC;

--------------------------------------------------

The UX Research team wants to see a distribution of watch durations. They want the result to contain:

duration, which is the watch event duration, rounded to the closest minute
count, the number of watch events falling into this “bucket”
Your result should look like:

duration	count
1.0	        9
2.0	        21
3.0	        19
…	          …

Use COUNT(), GROUP BY, and ORDER BY to create this result and order this data by increasing duration.

SELECT ROUND(watch_duration_in_minutes) AS 'duration',
   COUNT(*) AS 'count'
FROM watch_history
GROUP BY duration
ORDER BY duration ASC;

--------------------------------------------------

Find all the users that have successfully made a payment to Codeflix and find their total amount paid.
Sort them by their total payments (from high to low).

Use SUM(), WHERE, GROUP BY, and ORDER BY.

SELECT user_id, SUM(amount) AS 'total' FROM payments
WHERE status = 'paid'
GROUP BY user_id
ORDER BY SUM(amount) DESC;

--------------------------------------------------

Generate a table of user ids and total watch duration for users who watched more than 400 minutes of content.

Use SUM(), GROUP BY, and HAVING to achieve this.

SELECT user_id, 
   SUM(watch_duration_in_minutes) AS 'total_duration'
FROM watch_history
GROUP BY 1
HAVING total_duration > 400;

--------------------------------------------------

To the nearest minute, how many minutes of content were streamed on Codeflix?

SELECT ROUND(SUM(watch_duration_in_minutes), 0) 
FROM watch_history;

--------------------------------------------------

Which days in this period did Codeflix collect the most money?
Your result should have two columns, pay_date and total amount, sorted by the latter descending.
This should only include successful payments (status = 'paid').

Use SUM(), GROUP BY, and ORDER BY.

SELECT pay_date AS 'day',
   SUM(amount) AS 'total'
FROM payments
WHERE status = 'paid'
GROUP BY day
ORDER BY total DESC;

--------------------------------------------------

When users successfully pay Codeflix (status = 'paid'), what is the average payment amount?

SELECT AVG(amount)
FROM payments
WHERE status = 'paid';

--------------------------------------------------

Of all the events in the watch_history table, what is the duration of the longest individual watch event? What is the duration of the shortest?

Use one query and rename the results to max and min.

SELECT MAX(watch_duration_in_minutes) AS MaxDuration, MIN(watch_duration_in_minutes) AS MinDuration
FROM watch_history ;


-------------------------------------------------- Trends in Startups --------------------------------------------------

1. Getting started, take a look at the startups table:

SELECT * FROM startups;


2. Calculate the total number of companies in the table.

SELECT COUNT(name) AS NumberOfCompanies FROM startups;

3. We want to know the total value of all companies in this table.
Calculate this by getting the SUM() of the valuation column.

SELECT SUM(valuation) SalaryInDollar FROM startups;


4. What is the highest amount raised by a startup?
Return the maximum amount of money raised.

SELECT MAX(raised) HighestAmount FROM startups;


5. Edit the query so that it returns the maximum amount of money raised, during ‘Seed’ stage.

SELECT name, MAX(raised) AS MaxRaised, stage FROM startups
WHERE stage = 'Seed';


6. In what year was the oldest company on the list founded?

SELECT name, MIN(founded) AS OldestCompany FROM startups;


7. Return the average valuation.

SELECT name, AVG(valuation) AS AvgValueation FROM startups;


8. Return the average valuation, in each category.

SELECT name, AVG(valuation) AS AvgValueation FROM startups
GROUP BY category;

9. Return the average valuation, in each category.
Round the averages to tow decimal places.

SELECT name, ROUND(AVG(valuation),2) AS AvgValueation FROM startups
GROUP BY category;


10. Return the average valuation, in each category.
Round the averages to two decimal places.
Lastly, order the list from highest averages to lowest.

SELECT name, ROUND(AVG(valuation),2) AS AvgValueation FROM startups
GROUP BY 1
ORDER BY 2 DESC;


What are the most competitive markets?
11. First, return the name of each category with the total number of companies that belong to it.

SELECT category, COUNT(*) FROM startups
GROUP BY category;


12. Next, filter the result to only include categories that have more than three companies in them.
What are the most competitive markets?

SELECT category, COUNT(*) AS CompetitiveMarkets FROM startups
GROUP BY category
HAVING COUNT(*) > 3
ORDER BY 2 DESC;


Let's see if there's a difference in startups sizes among different locations:
13. What is the average size of a startup in each location?

SELECT location, ROUND(AVG(employees),0) AS Employees FROM startups
GROUP BY 1
ORDER BY 2 DESC;


14. What is the average size of a startup in each location, with average sizes above 500?

SELECT location, ROUND(AVG(employees),0) AS Employees FROM startups
GROUP BY 1
HAVING AVG(employees) > 500
ORDER BY 2 DESC;


-------------------------------------------------- The Metropolitan Museum of Art --------------------------------------------------

1. Start by getting a feel for the met table:

SELECT * FROM met 
LIMIT 10;


2. How many pieces are in the American Decorative Art collection?

SELECT COUNT(*) AS PiecesOfCOllection FROM met; 


3. Celery was considered a luxurious snack in the Victorian era (around the 1800s). Wealthy families served stalks of it in intricate glass vases.
Don’t believe it?

Count the number of pieces where the category includes ‘celery’.

SELECT DISTINCT category, COUNT(*) FROM met
WHERE category LIKE '%celery%'
GROUP BY 1; 


4. Find the title and medium of the oldest piece(s) in the collection.

SELECT MIN(date), title, medium FROM met;

or 

SELECT date, title, medium FROM met
GROUP BY 1 
ORDER BY 1 ASC;


5. Not every American decoration is from the Americas… where are they are coming from?
Find the top 10 countries with the most pieces in the collection.

SELECT country, COUNT(*) FROM met
WHERE country IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10;


6. There are all kinds of American decorative art in the Met’s collection.
Find the categories HAVING more than 100 pieces.

SELECT category, COUNT(*) FROM met
GROUP BY 1
HAVING COUNT(*) > 100
ORDER BY 2 DESC;


7. Lastly, let’s look at some bling!
Count the number of pieces where the medium contains ‘gold’ or ‘silver’.
And sort in descending order.

SELECT medium, COUNT(*) FROM met
WHERE medium LIKE '%gold%'
   OR medium LIKE '%silver%'
GROUP BY 1
ORDER BY 2 DESC;

-------------------------------------------------- Analyze Hacker News Trends --------------------------------------------------

1. Start by getting a feel for the hacker_news table!
Let’s find the most popular Hacker News stories:

SELECT title, score FROM hacker_news
ORDER BY score DESC
LIMIT 5;


2. Recent studies have found that online forums tend to be dominated by a small percentage of their users (1-9-90 Rule).
Is this true of Hacker News?
Is a small percentage of Hacker News submitters taking the majority of the points?
First, find the total score of all the stories.

SELECT SUM(score) ScoreOfStories
FROM hacker_news;


3. Next, we need to pinpoint the users who have accumulated a lot of points across their stories.
Find the individual users who have gotten combined scores of more than 200, and their combined scores.

GROUP BY and HAVING are needed!

SELECT user, SUM(score) AS ScoreOfStories FROM hacker_news
GROUP BY 1
HAVING SUM(score) > 200
ORDER BY 2 DESC;

4. Then, we want to add these users’ scores together and divide by the total to get the percentage.
Add their scores together and divide it by the total sum. Like so:

SELECT (1.0 + 2.0 + 3.0) / 6.0;
So, is Hacker News dominated by these users?

SELECT ROUND((517 + 309 + 304 + 282) / 6366.0, 2) AS UserPercentage;



5. Oh no! While we are looking at the power users, some users are rickrolling — tricking readers into clicking on a link to a funny video and claiming that it links to information about coding.
The url of the video is:
https://www.youtube.com/watch?v=dQw4w9WgXcQ

How many times has each offending user posted this link?

SELECT user,
   COUNT(*) AS OffendingPosts
FROM hacker_news
WHERE url LIKE '%watch?v=dQw4w9WgXcQ%'
GROUP BY 1
ORDER BY 2 DESC;


6. Hacker News stories are essentially links that take users to other websites.
Which of these sites feed Hacker News the most:
GitHub, Medium, or New York Times?
First, we want to categorize each story based on their source.
We can do this using a CASE statement:

            SELECT CASE
               WHEN url LIKE '%github.com%' THEN 'GitHub'
               -- WHEN statement here
               -- WHEN statement here
               -- ELSE statement here
              END AS 'Source'
            FROM hacker_news;

Fill in the other WHEN statements and the ELSE statement.

SELECT CASE
   WHEN url LIKE '%github.com%' THEN 'GitHub'
   WHEN url LIKE '%medium.com%' THEN 'Medium'
   WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
   ELSE 'Other'
  END AS 'Source'
FROM hacker_news;


7. Next, build on the previous query:
Add a column for the number of stories from each URL using COUNT().
Also, GROUP BY the CASE statement.
Remember that you can refer to a column in GROUP BY using a number.

SELECT CASE
   WHEN url LIKE '%github.com%' THEN 'GitHub'
   WHEN url LIKE '%medium.com%' THEN 'Medium'
   WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
   ELSE 'Other'
  END AS 'Source',
  COUNT(*)
FROM hacker_news
GROUP BY 1;


8. Every submitter wants their story to get a high score so that the story makes it to the front page, but…
What’s the best time of the day to post a story on Hacker News?
Before we get started, let’s run this query and take a look at the timestamp column:

            SELECT timestamp
            FROM hacker_news
            LIMIT 10;
            Notice that the values are formatted like:

            2018-05-08T12:30:00Z

If you ignore the T and Z, the format is:
YYYY-MM-DD HH:MM:SS

SELECT timestamp FROM hacker_news
LIMIT 10;


9. SQLite comes with a strftime() function - a very powerful function that allows you to return a formatted date.
It takes two arguments:

strftime(format, column)

Let’s test this function out:

               SELECT timestamp,
                  strftime('%H', timestamp)
               FROM hacker_news
               GROUP BY 1
               LIMIT 20;
               
What do you think this does? Open the hint if you’d like to learn more.

For strftime(__, timestamp):

%Y returns the year (YYYY)
%m returns the month (01-12)
%d returns the day of the month (1-31)
%H returns 24-hour clock (00-23)
%M returns the minute (00-59)
%S returns the seconds (00-59)
if timestamp format is YYYY-MM-DD HH:MM:SS.


10. Okay, now we understand how strftime() works. Let’s write a query that returns three columns:
The hours of the timestamp
The average score for each hour
The count of stories for each hour

SELECT strftime('%H', timestamp), 
   AVG(score),
   COUNT(*)
FROM hacker_news
GROUP BY 1
ORDER BY 1;


11. Let’s edit a few things in the previous query:
Round the average scores (ROUND()).
Rename the columns to make it more readable (AS).
Add a WHERE clause to filter out the NULL values in timestamp.
Take a look at the result again:
What are the best hours to post a story on Hacker News?

SELECT strftime('%H', timestamp) AS 'Hour', 
   ROUND(AVG(score), 1) AS 'Average Score', 
   COUNT(*) AS 'Number of Stories'
FROM hacker_news
WHERE timestamp IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC;

-------------------------------------------------- Cryptocurrency Exchange --------------------------------------------------

1. Let’s start by checking out the whole transactions table:
What are the column names?

SELECT * FROM transactions;


2. The money_in column records the amount (in USD) the user bought.
What is the total money_in in the table?

SELECT SUM(money_in) FROM transactions;


3. The money_out column records the amount (in USD) the user sold.
What is the total money_out in the table?

SELECT SUM(money_out) FROM transactions;


4. It was reported that Bitcoin dominates Fiddy Cent’s exchange. Let’s see if it is true within these dates by answering two questions:

How many money_in transactions are in this table?
How many money_in transactions are in this table where ‘BIT’ is the currency?

SELECT COUNT(money_in) FROM transactions;
 
SELECT COUNT(money_in) FROM transactions
WHERE currency = 'BIT';


5. What was the largest transaction in this whole table?
Was it money_in or money_out?

SELECT 
CASE 
  WHEN MAX(money_in) < MAX(money_out) THEN 'money_in'
  WHEN MAX(money_in) > MAX(money_out) THEN 'money_out'
  ELSE 'both are the same'
END AS 'Where is the largest transaction in?',
CASE
  WHEN MAX(money_in) < MAX(money_out) THEN MAX(money_in)
  WHEN MAX(money_in) > MAX(money_out) THEN MAX(money_out)
END AS 'What was the largest transaction?'
FROM transactions;


6. What is the average money_in in the table for the currency Ethereum (‘ETH’)?

SELECT ROUND(AVG(money_in),0) AS AvgEthereumMoney_in FROM transactions
WHERE currency = 'ETH';


7. Let’s build a ledger for the different dates.
Select date, average money_in, and average money_out from the table.
And group everything by date.

SELECT date, 
   ROUND(AVG(money_in),0) AS Avg_IN, 
   ROUND(AVG(money_out),0) AS Avg_Out
FROM transactions
GROUP BY date
ORDER BY 2 DESC;


8. To make the previous query easier to read, round the averages to 2 decimal places.
Give the column aliases using AS for readability.

SELECT date AS 'Date', 
   ROUND(AVG(money_in), 2) AS 'Average Buy',
   ROUND(AVG(money_out), 2) AS 'Average Sell'
FROM transactions
GROUP BY date;


-------------------------------------------------- Joining Multiple Tables --------------------------------------------------

SELECT * FROM orders
LIMIT 5;
 
SELECT * FROM subscriptions
LIMIT 5;
 
SELECT * FROM customers
LIMIT 5;


1. Join orders table and subscriptions table and select all columns.
Make sure to join on the subscription_id column.

SELECT * FROM orders
JOIN subscriptions
  ON orders.subscription_id = subscriptions.subscription_id;
  

2. Don’t remove the previous query.
Add a second query after your first one that only selects rows from the join where description is equal to ‘Fashion Magazine’.

SELECT *
FROM orders
JOIN subscriptions
  ON orders.subscription_id = subscriptions.subscription_id
WHERE subscriptions.description = 'Fashion Magazine';


-------------------------------------------------- Inner Joins --------------------------------------------------


SELECT COUNT(*)
FROM newspaper;

SELECT COUNT(*)
FROM online;

SELECT COUNT(*)
FROM newspaper
JOIN online
	ON newspaper.id = online.id;


-------------------------------------------------- Left Joins --------------------------------------------------

-- First query
SELECT *
FROM newspaper
LEFT JOIN online
	ON newspaper.id = online.id;
  
-- Second query
SELECT *
FROM newspaper
LEFT JOIN online
	ON newspaper.id = online.id
WHERE online.id IS NULL;


-------------------------------------------------- Primary Key vs Foreign Key --------------------------------------------------

Each of these tables has a column that uniquely identifies each row of that table:

order_id for orders
subscription_id for subscriptions
customer_id for customers
These special columns are called primary keys.

Primary keys have a few requirements:

1. None of the values can be NULL.
2. Each value must be unique (i.e., you can’t have two customers with the same customer_id in the customers table).
3. A table can not have more than one primary key column.

Note that customer_id (the primary key for customers) and subscription_id (the primary key for subscriptions) both appear in this.
When the primary key for one table appears in a different table, it is called a foreign key.
So customer_id is a primary key when it appears in customers, but a foreign key when it appears in orders.

In this example, our primary keys all had somewhat descriptive names. Generally, the primary key will just be called id. 
Foreign keys will have more descriptive names.

Why is this important? The most common types of joins will be joining a foreign key from one table with the primary key from another table. 
For instance, when we join orders and customers, we join on customer_id, which is a foreign key in orders and the primary key in customers.


-------------------------------------------------- Cross Join --------------------------------------------------

SELECT COUNT(*) FROM newspaper
WHERE start_month <= 3 
  AND end_month >= 3;
  
SELECT * FROM newspaper
CROSS JOIN months;

SELECT * FROM newspaper
CROSS JOIN months
WHERE start_month <= month 
  AND end_month >= month;

SELECT month, 
  COUNT(*)
  FROM newspaper
CROSS JOIN months
WHERE start_month <= month 
  AND end_month >= month
GROUP BY month;


-------------------------------------------------- Union --------------------------------------------------


SELECT * FROM newspaper 
UNION 
SELECT * 
FROM online;


-------------------------------------------------- With --------------------------------------------------


WITH previous_query AS (
   SELECT customer_id,
      COUNT(subscription_id) AS 'subscriptions'
   FROM orders
   GROUP BY customer_id
)
SELECT customers.customer_name, 
   previous_query.subscriptions
FROM previous_query
JOIN customers
  ON previous_query.customer_id = customers.customer_id;


-------------------------------------------------- Mutiple Tables Challenge1 --------------------------------------------------

Let’s see which plans are used by which premium members!

The column membership_plan_id in premium_users should match the column id in plans.
Join plans and premium_users and select:

		user_id from premium_users
		description from plans
		
(Be sure to select the columns in this order)

SELECT premium_users.user_id, plans.description
FROM premium_users
JOIN plans
  ON plans.id = premium_users.membership_plan_id;


-------------------------------------------------- Mutiple Tables Challenge2 --------------------------------------------------


Let’s see the titles of songs that were played by each user!

The column song_id in plays should match the column id in songs.
Join plays to songs and select:

		user_id from plays
		play_date from plays
		title from songs
		
(Be sure to select the columns in this order)

SELECT plays.user_id, plays.play_date, songs.title 
FROM plays
Join songs
  ON plays.song_id = songs.id;
  
  
-------------------------------------------------- Mutiple Tables Challenge3 --------------------------------------------------
Which users aren’t premium users?
Use a LEFT JOIN to combine users and premium_users and select id from users.
The column id in users should match the column user_id in premium_users.
Use a WHERE clause to limit the results to users where premium_users.user_id IS NULL. This will remove premium users and leave you with only free users.


SELECT users.id FROM users
LEFT JOIN premium_users
  ON users.id = premium_users.user_id
WHERE premium_users.user_id IS NULL;
  
  
-------------------------------------------------- Mutiple Tables Challenge4 --------------------------------------------------

Use a left join to combine january and february on user_id and select user_id from january.
Add the following WHERE statement to find which users played songs in January, but not February:
		
		WHERE february.user_id IS NULL	

WITH january AS (
  SELECT *
  FROM plays
  WHERE strftime("%m", play_date) = '01'
),
february AS (
  SELECT *
  FROM plays
  WHERE strftime("%m", play_date) = '02'

)
SELECT january.user_id
FROM january
LEFT JOIN february
	ON january.user_id = february.user_id
WHERE february.user_id IS NULL;


-------------------------------------------------- Mutiple Tables Challenge5 --------------------------------------------------

For each month in months, we want to know if each user in premium_users was active or canceled. Cross join months and premium_users and select:

		user_id from premium_users
		purchase_date from premium_users
		cancel_date from premium_users
		months from months
		
(Be sure to select the columns in this order)

 SELECT premium_users.user_id,
 premium_users.purchase_date,
 premium_users.cancel_date,
 months.months
 FROM premium_users
 CROSS JOIN months;


-------------------------------------------------- Mutiple Tables Challenge6 --------------------------------------------------

Replace the SELECT statement in your CROSS JOIN with the following statement:

		SELECT premium_users.user_id,
		  months.months,
		  CASE
		    WHEN (
		      premium_users.purchase_date <= months.months
		      )
		      AND
		      (
			premium_users.cancel_date >= months.months
			OR
			premium_users.cancel_date IS NULL
		      )
		    THEN 'active'
		    ELSE 'not_active'
		  END AS 'status'
		  
This will tell us if a particular user is 'active' or 'not_active' each month.

SELECT premium_users.user_id,
  months.months,
  CASE
    WHEN (
      premium_users.purchase_date <= months.months
      )
      AND
      (
        premium_users.cancel_date >= months.months
        OR
        premium_users.cancel_date IS NULL
      )
    THEN 'active'
    ELSE 'not_active'
  END AS 'status'
FROM premium_users
CROSS JOIN months;


-------------------------------------------------- Mutiple Tables Challenge7 --------------------------------------------------

Songify has added some new songs to their catalog.
Combine songs and bonus_songs using UNION and select all columns from the result.
Since the songs table is so big, just look at a sample by LIMITing the results to 10 rows.

SELECT * FROM songs
UNION
SELECT * FROM bonus_songs
LIMIT 10;


-------------------------------------------------- Mutiple Tables Challenge8 --------------------------------------------------

Modify the query in test.sqlite:
Add a third UNION/SELECT so that the result contains 2017-03-01.

SELECT '2017-01-01' as month
UNION
SELECT '2017-02-01' as month
UNION
SELECT '2017-03-01' as month;


-------------------------------------------------- Mutiple Tables Challenge9 --------------------------------------------------

The following query will give us the number of times that each song was played:

		SELECT song_id,
		   COUNT(*) AS 'times_played'
		FROM plays
		GROUP BY song_id;
		
Use a WITH statement to alias this code as play_count.

Join play_count with songs and select (in this order):

		songs table’s title column
		songs table’s artist column
		play_count‘s times_played column
		
Remember that play_count.song_id will match songs.id.

WITH play_count AS (
   SELECT song_id,
      COUNT(*) AS 'times_played'
   FROM plays
   GROUP BY song_id)
SELECT songs.title,
  songs.artist,
  play_count.times_played
FROM play_count
JOIN songs
  ON play_count.song_id = songs.id;


-------------------------------------------------- Subqueries --------------------------------------------------

We will use two tables throughout this lesson, band_students and drama_students.
Select the first 10 rows from each of the tables to get a feel for the data.
What are the column names?


SELECT * FROM band_students
LIMIT 10; 

SELECT * FROM drama_students
LIMIT 10;

Column names are: id, first_name, last_name, grade, instrument


-------------------------------------------------- Subqueries (Subqueries) --------------------------------------------------


As the name suggests, a subquery is an internal query nested inside of an external query. 
They can be nested inside of SELECT, INSERT, UPDATE, or DELETE statements. 
Anytime a subquery is present, it gets executed before the external statement is run.

Subqueries are very similar to joins in terms of functionality; however, 
joins are more efficient and subqueries are typically more readable.

For example, if we had two tables listing students in two different clubs, 
book_club and art_club, we could find out which students are in both tables by using a join such as:

		SELECT id, first_name, last_name
		FROM book_club
		JOIN art_club
		  ON book_club.id = art_club.id;
		  
However, a subquery can be used to achieve the same result and is more readable:

		SELECT id, first_name, last_name
		FROM book_club
		WHERE id IN (
		   SELECT id 
		   FROM art_club);
		   
In this statement, the subquery SELECT statement would be executed first, resulting in a list of student ids from the art_club table. 
Then, the outer query would run and select the student ids from book_club table which also appear in the subquery results.


Complete the subquery to find students taking both band and drama.

		SELECT first_name, last_name FROM band_students
		WHERE id IN (
		   ...
		   ...);
   
SELECT first_name, last_name FROM band_students
WHERE id IN (
   SELECT id
   FROM drama_students);


-------------------------------------------------- Subqueries (Inserts, Updates, and Deletes) --------------------------------------------------


Now that we know what a subquery is and some syntax for using subqueries, let’s begin looking at some of the ways subqueries can be used.

Previously, we mentioned subqueries can be placed inside of SELECT, INSERT, UPDATE, or DELETE statements. 
Recall that subqueries are always executed prior to the external query being run.

In the same way that the external query selects from the internal query’s results, 
it is important to note that this same behavior takes place when the external query is an INSERT, UPDATE, or DELETE. 
Therefore, when a subquery is nested in a DELETE statement, the rows to be deleted will be among the results from the subquery.

For example, suppose students are unable to take both history and statistics. 
If we wanted to delete the rows for statistics students who are also enrolled in history, we could execute a statement such as:

		DELETE FROM statistics_students
		WHERE id in (
		  SELECT id 
		  FROM history_students);


A memo was recently released stating that 9th grade students are unable to take both drama and band concurrently. 
The students currently enrolled in both classes will be dropped from drama and remain in band.


-------------------------------------------------- Subqueries (Comparison Operators) --------------------------------------------------


Subqueries have the unique ability to take the place of expressions in SQL queries. 
As such, one way of using subqueries in SQL statements is with comparison operators.

We can use operators such as <, >, =, and != to compare the results of the external query to those of the inner query.

For example, if Olivia decided to drop statistics and take history, we could find out how many history students are 
at or below her grade level by performing the following query:

		SELECT * FROM history_students
		WHERE grade <= (
		  SELECT grade
		  FROM statistics_students
		  WHERE id = 1);


Emlynne Torritti (id 20), has decided to drop band and join drama. She wants to know how many other students in her grade level are already enrolled in drama.

Use a subquery to find the students enrolled in drama that are in the same grade as Emlynne.

SELECT * FROM drama_students
WHERE grade = (
  SELECT grade
  FROM band_students
  WHERE id = 20);


-------------------------------------------------- Subqueries (IN and NOT in Clauses) --------------------------------------------------


One of the more common ways to use subqueries is with the use of an IN or NOT IN clause. 
Recall that the subquery is always executed first followed by the external query.

When an IN clause is used, results retrieved from the external query must appear within the subquery results. Similarly, 
when a NOT IN clause is used, results retrieved from the external query must not appear within the subquery results.

For example, we could use the below query to find out which students are enrolled in statistics and history:

		SELECT * 
		FROM statistics_students
		WHERE id IN (
		  SELECT id
		  FROM history_students);


Write a query that gives the first and last names of students enrolled in band but not in drama.

SELECT first_name, last_name 
FROM band_students
WHERE id NOT IN (
  SELECT id
  FROM drama_students);


-------------------------------------------------- Subqueries (EXISTS and NOT EXISTS) --------------------------------------------------


In the previous exercise we discussed the use of IN and NOT IN clauses. We also have the option of EXISTS and NOT EXISTS clauses. 
While EXISTS/NOT EXISTS are similar to IN/NOT IN clauses, there are some key differences. Let’s explore those differences now.

Recall that when a subquery is included, the inner query runs before the external query. When the inner query is included using an IN or NOT IN clause, 
all rows meeting the inner query’s criteria are returned and then compared against the external query’s criteria. However, 
when the inner query is included using an EXISTS or NOT EXISTS clause, we are only checking for the presence of rows meeting the specified criteria, 
so the inner query only returns a true or false.

If we compare this functionality in terms of efficiency, EXISTS/NOT EXISTS are usually more efficient than IN/NOT IN clauses; 
this is because the IN/NOT IN clause has to return all rows meeting the specific criteria whereas the EXISTS/NOT EXISTS only needs 
to find the presence of one row to determine if a true or false value needs to be returned.

SELECT grade FROM band_students
WHERE EXISTS (
  SELECT grade FROM drama_students
)
GROUP BY grade;


-------------------------------------------------- Lyft Trip Data (Ride-sharing Company) --------------------------------------------------

1. Let’s examine the three tables.

SELECT * FROM trips;
SELECT * FROM riders;
SELECT * FROM cars;


2. What’s the primary key of trips?
What’s the primary key of riders?
What’s the primary key of cars?

For all three of them, its ID


3. Try out a simple cross join between riders and cars.
Is the result useful?

SELECT riders.first,
   riders.last,
   cars.model
FROM riders, cars;

The shown Data is NOT so useful.


4. Suppose we want to create a Trip Log with the trips and its users.
Find the columns to join between trips and riders and combine the two tables using a LEFT JOIN.
Let trips be the left table.

SELECT * FROM trips
LEFT JOIN riders 
  ON trips.rider_id = riders.id;
  
or

SELECT trips.date, 
   trips.pickup, 
   trips.dropoff, 
   trips.type, 
   trips.cost,
   riders.first, 
   riders.last,
   riders.username
FROM trips
LEFT JOIN riders 
  ON trips.rider_id = riders.id;


5. Suppose we want to create a link between the trips and the cars used during those trips.
Find the columns to join on and combine the trips and cars table using an INNER JOIN.

SELECT *
FROM trips
JOIN cars
  ON trips.car_id = cars.id;

or 

SELECT 
  trips.date,
  riders.username,
  cars.model,
  trips.cost
FROM trips
  JOIN cars ON trips.car_id = cars.id
  JOIN riders ON trips.rider_id = riders.id;


6. The new riders data are in! There are three new users this month.
Stack the riders table on top of the new table named riders2.

SELECT *
FROM riders
UNION
SELECT *
FROM riders2;

























